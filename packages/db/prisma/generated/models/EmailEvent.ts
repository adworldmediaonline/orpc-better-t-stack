
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EmailEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EmailEvent
 * 
 */
export type EmailEventModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailEventPayload>

export type AggregateEmailEvent = {
  _count: EmailEventCountAggregateOutputType | null
  _min: EmailEventMinAggregateOutputType | null
  _max: EmailEventMaxAggregateOutputType | null
}

export type EmailEventMinAggregateOutputType = {
  id: string | null
  emailRecipientId: string | null
  eventType: $Enums.EmailEventType | null
  ipAddress: string | null
  userAgent: string | null
  createdAt: Date | null
}

export type EmailEventMaxAggregateOutputType = {
  id: string | null
  emailRecipientId: string | null
  eventType: $Enums.EmailEventType | null
  ipAddress: string | null
  userAgent: string | null
  createdAt: Date | null
}

export type EmailEventCountAggregateOutputType = {
  id: number
  emailRecipientId: number
  eventType: number
  eventData: number
  ipAddress: number
  userAgent: number
  createdAt: number
  _all: number
}


export type EmailEventMinAggregateInputType = {
  id?: true
  emailRecipientId?: true
  eventType?: true
  ipAddress?: true
  userAgent?: true
  createdAt?: true
}

export type EmailEventMaxAggregateInputType = {
  id?: true
  emailRecipientId?: true
  eventType?: true
  ipAddress?: true
  userAgent?: true
  createdAt?: true
}

export type EmailEventCountAggregateInputType = {
  id?: true
  emailRecipientId?: true
  eventType?: true
  eventData?: true
  ipAddress?: true
  userAgent?: true
  createdAt?: true
  _all?: true
}

export type EmailEventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailEvent to aggregate.
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailEvents to fetch.
   */
  orderBy?: Prisma.EmailEventOrderByWithRelationInput | Prisma.EmailEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailEvents
  **/
  _count?: true | EmailEventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailEventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailEventMaxAggregateInputType
}

export type GetEmailEventAggregateType<T extends EmailEventAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailEvent[P]>
}




export type EmailEventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailEventWhereInput
  orderBy?: Prisma.EmailEventOrderByWithAggregationInput | Prisma.EmailEventOrderByWithAggregationInput[]
  by: Prisma.EmailEventScalarFieldEnum[] | Prisma.EmailEventScalarFieldEnum
  having?: Prisma.EmailEventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailEventCountAggregateInputType | true
  _min?: EmailEventMinAggregateInputType
  _max?: EmailEventMaxAggregateInputType
}

export type EmailEventGroupByOutputType = {
  id: string
  emailRecipientId: string
  eventType: $Enums.EmailEventType
  eventData: runtime.JsonValue | null
  ipAddress: string | null
  userAgent: string | null
  createdAt: Date
  _count: EmailEventCountAggregateOutputType | null
  _min: EmailEventMinAggregateOutputType | null
  _max: EmailEventMaxAggregateOutputType | null
}

type GetEmailEventGroupByPayload<T extends EmailEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailEventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailEventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailEventGroupByOutputType[P]>
      }
    >
  >



export type EmailEventWhereInput = {
  AND?: Prisma.EmailEventWhereInput | Prisma.EmailEventWhereInput[]
  OR?: Prisma.EmailEventWhereInput[]
  NOT?: Prisma.EmailEventWhereInput | Prisma.EmailEventWhereInput[]
  id?: Prisma.StringFilter<"EmailEvent"> | string
  emailRecipientId?: Prisma.StringFilter<"EmailEvent"> | string
  eventType?: Prisma.EnumEmailEventTypeFilter<"EmailEvent"> | $Enums.EmailEventType
  eventData?: Prisma.JsonNullableFilter<"EmailEvent">
  ipAddress?: Prisma.StringNullableFilter<"EmailEvent"> | string | null
  userAgent?: Prisma.StringNullableFilter<"EmailEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailEvent"> | Date | string
  recipient?: Prisma.XOR<Prisma.EmailRecipientScalarRelationFilter, Prisma.EmailRecipientWhereInput>
}

export type EmailEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  emailRecipientId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  eventData?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  recipient?: Prisma.EmailRecipientOrderByWithRelationInput
}

export type EmailEventWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmailEventWhereInput | Prisma.EmailEventWhereInput[]
  OR?: Prisma.EmailEventWhereInput[]
  NOT?: Prisma.EmailEventWhereInput | Prisma.EmailEventWhereInput[]
  emailRecipientId?: Prisma.StringFilter<"EmailEvent"> | string
  eventType?: Prisma.EnumEmailEventTypeFilter<"EmailEvent"> | $Enums.EmailEventType
  eventData?: Prisma.JsonNullableFilter<"EmailEvent">
  ipAddress?: Prisma.StringNullableFilter<"EmailEvent"> | string | null
  userAgent?: Prisma.StringNullableFilter<"EmailEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailEvent"> | Date | string
  recipient?: Prisma.XOR<Prisma.EmailRecipientScalarRelationFilter, Prisma.EmailRecipientWhereInput>
}, "id">

export type EmailEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  emailRecipientId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  eventData?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.EmailEventCountOrderByAggregateInput
  _max?: Prisma.EmailEventMaxOrderByAggregateInput
  _min?: Prisma.EmailEventMinOrderByAggregateInput
}

export type EmailEventScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailEventScalarWhereWithAggregatesInput | Prisma.EmailEventScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailEventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailEventScalarWhereWithAggregatesInput | Prisma.EmailEventScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EmailEvent"> | string
  emailRecipientId?: Prisma.StringWithAggregatesFilter<"EmailEvent"> | string
  eventType?: Prisma.EnumEmailEventTypeWithAggregatesFilter<"EmailEvent"> | $Enums.EmailEventType
  eventData?: Prisma.JsonNullableWithAggregatesFilter<"EmailEvent">
  ipAddress?: Prisma.StringNullableWithAggregatesFilter<"EmailEvent"> | string | null
  userAgent?: Prisma.StringNullableWithAggregatesFilter<"EmailEvent"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EmailEvent"> | Date | string
}

export type EmailEventCreateInput = {
  id?: string
  eventType: $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
  recipient: Prisma.EmailRecipientCreateNestedOneWithoutEventsInput
}

export type EmailEventUncheckedCreateInput = {
  id?: string
  emailRecipientId: string
  eventType: $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type EmailEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  recipient?: Prisma.EmailRecipientUpdateOneRequiredWithoutEventsNestedInput
}

export type EmailEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emailRecipientId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailEventCreateManyInput = {
  id?: string
  emailRecipientId: string
  eventType: $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type EmailEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emailRecipientId?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailEventListRelationFilter = {
  every?: Prisma.EmailEventWhereInput
  some?: Prisma.EmailEventWhereInput
  none?: Prisma.EmailEventWhereInput
}

export type EmailEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmailEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  emailRecipientId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  eventData?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EmailEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  emailRecipientId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EmailEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  emailRecipientId?: Prisma.SortOrder
  eventType?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type EmailEventCreateNestedManyWithoutRecipientInput = {
  create?: Prisma.XOR<Prisma.EmailEventCreateWithoutRecipientInput, Prisma.EmailEventUncheckedCreateWithoutRecipientInput> | Prisma.EmailEventCreateWithoutRecipientInput[] | Prisma.EmailEventUncheckedCreateWithoutRecipientInput[]
  connectOrCreate?: Prisma.EmailEventCreateOrConnectWithoutRecipientInput | Prisma.EmailEventCreateOrConnectWithoutRecipientInput[]
  createMany?: Prisma.EmailEventCreateManyRecipientInputEnvelope
  connect?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
}

export type EmailEventUncheckedCreateNestedManyWithoutRecipientInput = {
  create?: Prisma.XOR<Prisma.EmailEventCreateWithoutRecipientInput, Prisma.EmailEventUncheckedCreateWithoutRecipientInput> | Prisma.EmailEventCreateWithoutRecipientInput[] | Prisma.EmailEventUncheckedCreateWithoutRecipientInput[]
  connectOrCreate?: Prisma.EmailEventCreateOrConnectWithoutRecipientInput | Prisma.EmailEventCreateOrConnectWithoutRecipientInput[]
  createMany?: Prisma.EmailEventCreateManyRecipientInputEnvelope
  connect?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
}

export type EmailEventUpdateManyWithoutRecipientNestedInput = {
  create?: Prisma.XOR<Prisma.EmailEventCreateWithoutRecipientInput, Prisma.EmailEventUncheckedCreateWithoutRecipientInput> | Prisma.EmailEventCreateWithoutRecipientInput[] | Prisma.EmailEventUncheckedCreateWithoutRecipientInput[]
  connectOrCreate?: Prisma.EmailEventCreateOrConnectWithoutRecipientInput | Prisma.EmailEventCreateOrConnectWithoutRecipientInput[]
  upsert?: Prisma.EmailEventUpsertWithWhereUniqueWithoutRecipientInput | Prisma.EmailEventUpsertWithWhereUniqueWithoutRecipientInput[]
  createMany?: Prisma.EmailEventCreateManyRecipientInputEnvelope
  set?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  disconnect?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  delete?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  connect?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  update?: Prisma.EmailEventUpdateWithWhereUniqueWithoutRecipientInput | Prisma.EmailEventUpdateWithWhereUniqueWithoutRecipientInput[]
  updateMany?: Prisma.EmailEventUpdateManyWithWhereWithoutRecipientInput | Prisma.EmailEventUpdateManyWithWhereWithoutRecipientInput[]
  deleteMany?: Prisma.EmailEventScalarWhereInput | Prisma.EmailEventScalarWhereInput[]
}

export type EmailEventUncheckedUpdateManyWithoutRecipientNestedInput = {
  create?: Prisma.XOR<Prisma.EmailEventCreateWithoutRecipientInput, Prisma.EmailEventUncheckedCreateWithoutRecipientInput> | Prisma.EmailEventCreateWithoutRecipientInput[] | Prisma.EmailEventUncheckedCreateWithoutRecipientInput[]
  connectOrCreate?: Prisma.EmailEventCreateOrConnectWithoutRecipientInput | Prisma.EmailEventCreateOrConnectWithoutRecipientInput[]
  upsert?: Prisma.EmailEventUpsertWithWhereUniqueWithoutRecipientInput | Prisma.EmailEventUpsertWithWhereUniqueWithoutRecipientInput[]
  createMany?: Prisma.EmailEventCreateManyRecipientInputEnvelope
  set?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  disconnect?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  delete?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  connect?: Prisma.EmailEventWhereUniqueInput | Prisma.EmailEventWhereUniqueInput[]
  update?: Prisma.EmailEventUpdateWithWhereUniqueWithoutRecipientInput | Prisma.EmailEventUpdateWithWhereUniqueWithoutRecipientInput[]
  updateMany?: Prisma.EmailEventUpdateManyWithWhereWithoutRecipientInput | Prisma.EmailEventUpdateManyWithWhereWithoutRecipientInput[]
  deleteMany?: Prisma.EmailEventScalarWhereInput | Prisma.EmailEventScalarWhereInput[]
}

export type EnumEmailEventTypeFieldUpdateOperationsInput = {
  set?: $Enums.EmailEventType
}

export type EmailEventCreateWithoutRecipientInput = {
  id?: string
  eventType: $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type EmailEventUncheckedCreateWithoutRecipientInput = {
  id?: string
  eventType: $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type EmailEventCreateOrConnectWithoutRecipientInput = {
  where: Prisma.EmailEventWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailEventCreateWithoutRecipientInput, Prisma.EmailEventUncheckedCreateWithoutRecipientInput>
}

export type EmailEventCreateManyRecipientInputEnvelope = {
  data: Prisma.EmailEventCreateManyRecipientInput | Prisma.EmailEventCreateManyRecipientInput[]
  skipDuplicates?: boolean
}

export type EmailEventUpsertWithWhereUniqueWithoutRecipientInput = {
  where: Prisma.EmailEventWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailEventUpdateWithoutRecipientInput, Prisma.EmailEventUncheckedUpdateWithoutRecipientInput>
  create: Prisma.XOR<Prisma.EmailEventCreateWithoutRecipientInput, Prisma.EmailEventUncheckedCreateWithoutRecipientInput>
}

export type EmailEventUpdateWithWhereUniqueWithoutRecipientInput = {
  where: Prisma.EmailEventWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailEventUpdateWithoutRecipientInput, Prisma.EmailEventUncheckedUpdateWithoutRecipientInput>
}

export type EmailEventUpdateManyWithWhereWithoutRecipientInput = {
  where: Prisma.EmailEventScalarWhereInput
  data: Prisma.XOR<Prisma.EmailEventUpdateManyMutationInput, Prisma.EmailEventUncheckedUpdateManyWithoutRecipientInput>
}

export type EmailEventScalarWhereInput = {
  AND?: Prisma.EmailEventScalarWhereInput | Prisma.EmailEventScalarWhereInput[]
  OR?: Prisma.EmailEventScalarWhereInput[]
  NOT?: Prisma.EmailEventScalarWhereInput | Prisma.EmailEventScalarWhereInput[]
  id?: Prisma.StringFilter<"EmailEvent"> | string
  emailRecipientId?: Prisma.StringFilter<"EmailEvent"> | string
  eventType?: Prisma.EnumEmailEventTypeFilter<"EmailEvent"> | $Enums.EmailEventType
  eventData?: Prisma.JsonNullableFilter<"EmailEvent">
  ipAddress?: Prisma.StringNullableFilter<"EmailEvent"> | string | null
  userAgent?: Prisma.StringNullableFilter<"EmailEvent"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailEvent"> | Date | string
}

export type EmailEventCreateManyRecipientInput = {
  id?: string
  eventType: $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type EmailEventUpdateWithoutRecipientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailEventUncheckedUpdateWithoutRecipientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailEventUncheckedUpdateManyWithoutRecipientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  eventType?: Prisma.EnumEmailEventTypeFieldUpdateOperationsInput | $Enums.EmailEventType
  eventData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EmailEventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  emailRecipientId?: boolean
  eventType?: boolean
  eventData?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
  recipient?: boolean | Prisma.EmailRecipientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailEvent"]>

export type EmailEventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  emailRecipientId?: boolean
  eventType?: boolean
  eventData?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
  recipient?: boolean | Prisma.EmailRecipientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailEvent"]>

export type EmailEventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  emailRecipientId?: boolean
  eventType?: boolean
  eventData?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
  recipient?: boolean | Prisma.EmailRecipientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailEvent"]>

export type EmailEventSelectScalar = {
  id?: boolean
  emailRecipientId?: boolean
  eventType?: boolean
  eventData?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
}

export type EmailEventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "emailRecipientId" | "eventType" | "eventData" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["emailEvent"]>
export type EmailEventInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  recipient?: boolean | Prisma.EmailRecipientDefaultArgs<ExtArgs>
}
export type EmailEventIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  recipient?: boolean | Prisma.EmailRecipientDefaultArgs<ExtArgs>
}
export type EmailEventIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  recipient?: boolean | Prisma.EmailRecipientDefaultArgs<ExtArgs>
}

export type $EmailEventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailEvent"
  objects: {
    recipient: Prisma.$EmailRecipientPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    emailRecipientId: string
    eventType: $Enums.EmailEventType
    eventData: runtime.JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
  }, ExtArgs["result"]["emailEvent"]>
  composites: {}
}

export type EmailEventGetPayload<S extends boolean | null | undefined | EmailEventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailEventPayload, S>

export type EmailEventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailEventCountAggregateInputType | true
  }

export interface EmailEventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailEvent'], meta: { name: 'EmailEvent' } }
  /**
   * Find zero or one EmailEvent that matches the filter.
   * @param {EmailEventFindUniqueArgs} args - Arguments to find a EmailEvent
   * @example
   * // Get one EmailEvent
   * const emailEvent = await prisma.emailEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailEventFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailEventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailEventFindUniqueOrThrowArgs} args - Arguments to find a EmailEvent
   * @example
   * // Get one EmailEvent
   * const emailEvent = await prisma.emailEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailEventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventFindFirstArgs} args - Arguments to find a EmailEvent
   * @example
   * // Get one EmailEvent
   * const emailEvent = await prisma.emailEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailEventFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailEventFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventFindFirstOrThrowArgs} args - Arguments to find a EmailEvent
   * @example
   * // Get one EmailEvent
   * const emailEvent = await prisma.emailEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailEventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailEventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailEvents
   * const emailEvents = await prisma.emailEvent.findMany()
   * 
   * // Get first 10 EmailEvents
   * const emailEvents = await prisma.emailEvent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailEventWithIdOnly = await prisma.emailEvent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailEventFindManyArgs>(args?: Prisma.SelectSubset<T, EmailEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailEvent.
   * @param {EmailEventCreateArgs} args - Arguments to create a EmailEvent.
   * @example
   * // Create one EmailEvent
   * const EmailEvent = await prisma.emailEvent.create({
   *   data: {
   *     // ... data to create a EmailEvent
   *   }
   * })
   * 
   */
  create<T extends EmailEventCreateArgs>(args: Prisma.SelectSubset<T, EmailEventCreateArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailEvents.
   * @param {EmailEventCreateManyArgs} args - Arguments to create many EmailEvents.
   * @example
   * // Create many EmailEvents
   * const emailEvent = await prisma.emailEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailEventCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailEvents and returns the data saved in the database.
   * @param {EmailEventCreateManyAndReturnArgs} args - Arguments to create many EmailEvents.
   * @example
   * // Create many EmailEvents
   * const emailEvent = await prisma.emailEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailEvents and only return the `id`
   * const emailEventWithIdOnly = await prisma.emailEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailEventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailEvent.
   * @param {EmailEventDeleteArgs} args - Arguments to delete one EmailEvent.
   * @example
   * // Delete one EmailEvent
   * const EmailEvent = await prisma.emailEvent.delete({
   *   where: {
   *     // ... filter to delete one EmailEvent
   *   }
   * })
   * 
   */
  delete<T extends EmailEventDeleteArgs>(args: Prisma.SelectSubset<T, EmailEventDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailEvent.
   * @param {EmailEventUpdateArgs} args - Arguments to update one EmailEvent.
   * @example
   * // Update one EmailEvent
   * const emailEvent = await prisma.emailEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailEventUpdateArgs>(args: Prisma.SelectSubset<T, EmailEventUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailEvents.
   * @param {EmailEventDeleteManyArgs} args - Arguments to filter EmailEvents to delete.
   * @example
   * // Delete a few EmailEvents
   * const { count } = await prisma.emailEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailEventDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailEvents
   * const emailEvent = await prisma.emailEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailEventUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailEvents and returns the data updated in the database.
   * @param {EmailEventUpdateManyAndReturnArgs} args - Arguments to update many EmailEvents.
   * @example
   * // Update many EmailEvents
   * const emailEvent = await prisma.emailEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailEvents and only return the `id`
   * const emailEventWithIdOnly = await prisma.emailEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailEventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailEvent.
   * @param {EmailEventUpsertArgs} args - Arguments to update or create a EmailEvent.
   * @example
   * // Update or create a EmailEvent
   * const emailEvent = await prisma.emailEvent.upsert({
   *   create: {
   *     // ... data to create a EmailEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailEvent we want to update
   *   }
   * })
   */
  upsert<T extends EmailEventUpsertArgs>(args: Prisma.SelectSubset<T, EmailEventUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailEventClient<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventCountArgs} args - Arguments to filter EmailEvents to count.
   * @example
   * // Count the number of EmailEvents
   * const count = await prisma.emailEvent.count({
   *   where: {
   *     // ... the filter for the EmailEvents we want to count
   *   }
   * })
  **/
  count<T extends EmailEventCountArgs>(
    args?: Prisma.Subset<T, EmailEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailEventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailEventAggregateArgs>(args: Prisma.Subset<T, EmailEventAggregateArgs>): Prisma.PrismaPromise<GetEmailEventAggregateType<T>>

  /**
   * Group by EmailEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailEventGroupByArgs['orderBy'] }
      : { orderBy?: EmailEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailEvent model
 */
readonly fields: EmailEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailEventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  recipient<T extends Prisma.EmailRecipientDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmailRecipientDefaultArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailEvent model
 */
export interface EmailEventFieldRefs {
  readonly id: Prisma.FieldRef<"EmailEvent", 'String'>
  readonly emailRecipientId: Prisma.FieldRef<"EmailEvent", 'String'>
  readonly eventType: Prisma.FieldRef<"EmailEvent", 'EmailEventType'>
  readonly eventData: Prisma.FieldRef<"EmailEvent", 'Json'>
  readonly ipAddress: Prisma.FieldRef<"EmailEvent", 'String'>
  readonly userAgent: Prisma.FieldRef<"EmailEvent", 'String'>
  readonly createdAt: Prisma.FieldRef<"EmailEvent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmailEvent findUnique
 */
export type EmailEventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * Filter, which EmailEvent to fetch.
   */
  where: Prisma.EmailEventWhereUniqueInput
}

/**
 * EmailEvent findUniqueOrThrow
 */
export type EmailEventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * Filter, which EmailEvent to fetch.
   */
  where: Prisma.EmailEventWhereUniqueInput
}

/**
 * EmailEvent findFirst
 */
export type EmailEventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * Filter, which EmailEvent to fetch.
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailEvents to fetch.
   */
  orderBy?: Prisma.EmailEventOrderByWithRelationInput | Prisma.EmailEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailEvents.
   */
  cursor?: Prisma.EmailEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailEvents.
   */
  distinct?: Prisma.EmailEventScalarFieldEnum | Prisma.EmailEventScalarFieldEnum[]
}

/**
 * EmailEvent findFirstOrThrow
 */
export type EmailEventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * Filter, which EmailEvent to fetch.
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailEvents to fetch.
   */
  orderBy?: Prisma.EmailEventOrderByWithRelationInput | Prisma.EmailEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailEvents.
   */
  cursor?: Prisma.EmailEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailEvents.
   */
  distinct?: Prisma.EmailEventScalarFieldEnum | Prisma.EmailEventScalarFieldEnum[]
}

/**
 * EmailEvent findMany
 */
export type EmailEventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * Filter, which EmailEvents to fetch.
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailEvents to fetch.
   */
  orderBy?: Prisma.EmailEventOrderByWithRelationInput | Prisma.EmailEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailEvents.
   */
  cursor?: Prisma.EmailEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailEvents.
   */
  skip?: number
  distinct?: Prisma.EmailEventScalarFieldEnum | Prisma.EmailEventScalarFieldEnum[]
}

/**
 * EmailEvent create
 */
export type EmailEventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * The data needed to create a EmailEvent.
   */
  data: Prisma.XOR<Prisma.EmailEventCreateInput, Prisma.EmailEventUncheckedCreateInput>
}

/**
 * EmailEvent createMany
 */
export type EmailEventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailEvents.
   */
  data: Prisma.EmailEventCreateManyInput | Prisma.EmailEventCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailEvent createManyAndReturn
 */
export type EmailEventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * The data used to create many EmailEvents.
   */
  data: Prisma.EmailEventCreateManyInput | Prisma.EmailEventCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmailEvent update
 */
export type EmailEventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * The data needed to update a EmailEvent.
   */
  data: Prisma.XOR<Prisma.EmailEventUpdateInput, Prisma.EmailEventUncheckedUpdateInput>
  /**
   * Choose, which EmailEvent to update.
   */
  where: Prisma.EmailEventWhereUniqueInput
}

/**
 * EmailEvent updateMany
 */
export type EmailEventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailEvents.
   */
  data: Prisma.XOR<Prisma.EmailEventUpdateManyMutationInput, Prisma.EmailEventUncheckedUpdateManyInput>
  /**
   * Filter which EmailEvents to update
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * Limit how many EmailEvents to update.
   */
  limit?: number
}

/**
 * EmailEvent updateManyAndReturn
 */
export type EmailEventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * The data used to update EmailEvents.
   */
  data: Prisma.XOR<Prisma.EmailEventUpdateManyMutationInput, Prisma.EmailEventUncheckedUpdateManyInput>
  /**
   * Filter which EmailEvents to update
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * Limit how many EmailEvents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmailEvent upsert
 */
export type EmailEventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * The filter to search for the EmailEvent to update in case it exists.
   */
  where: Prisma.EmailEventWhereUniqueInput
  /**
   * In case the EmailEvent found by the `where` argument doesn't exist, create a new EmailEvent with this data.
   */
  create: Prisma.XOR<Prisma.EmailEventCreateInput, Prisma.EmailEventUncheckedCreateInput>
  /**
   * In case the EmailEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailEventUpdateInput, Prisma.EmailEventUncheckedUpdateInput>
}

/**
 * EmailEvent delete
 */
export type EmailEventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  /**
   * Filter which EmailEvent to delete.
   */
  where: Prisma.EmailEventWhereUniqueInput
}

/**
 * EmailEvent deleteMany
 */
export type EmailEventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailEvents to delete
   */
  where?: Prisma.EmailEventWhereInput
  /**
   * Limit how many EmailEvents to delete.
   */
  limit?: number
}

/**
 * EmailEvent without action
 */
export type EmailEventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
}
