
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Email` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Email
 * 
 */
export type EmailModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailPayload>

export type AggregateEmail = {
  _count: EmailCountAggregateOutputType | null
  _min: EmailMinAggregateOutputType | null
  _max: EmailMaxAggregateOutputType | null
}

export type EmailMinAggregateOutputType = {
  id: string | null
  userId: string | null
  subject: string | null
  htmlBody: string | null
  textBody: string | null
  scheduledFor: Date | null
  status: $Enums.EmailStatus | null
  sentAt: Date | null
  resendEmailId: string | null
  error: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmailMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  subject: string | null
  htmlBody: string | null
  textBody: string | null
  scheduledFor: Date | null
  status: $Enums.EmailStatus | null
  sentAt: Date | null
  resendEmailId: string | null
  error: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmailCountAggregateOutputType = {
  id: number
  userId: number
  subject: number
  htmlBody: number
  textBody: number
  scheduledFor: number
  status: number
  sentAt: number
  resendEmailId: number
  error: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmailMinAggregateInputType = {
  id?: true
  userId?: true
  subject?: true
  htmlBody?: true
  textBody?: true
  scheduledFor?: true
  status?: true
  sentAt?: true
  resendEmailId?: true
  error?: true
  createdAt?: true
  updatedAt?: true
}

export type EmailMaxAggregateInputType = {
  id?: true
  userId?: true
  subject?: true
  htmlBody?: true
  textBody?: true
  scheduledFor?: true
  status?: true
  sentAt?: true
  resendEmailId?: true
  error?: true
  createdAt?: true
  updatedAt?: true
}

export type EmailCountAggregateInputType = {
  id?: true
  userId?: true
  subject?: true
  htmlBody?: true
  textBody?: true
  scheduledFor?: true
  status?: true
  sentAt?: true
  resendEmailId?: true
  error?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmailAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Email to aggregate.
   */
  where?: Prisma.EmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Emails to fetch.
   */
  orderBy?: Prisma.EmailOrderByWithRelationInput | Prisma.EmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Emails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Emails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Emails
  **/
  _count?: true | EmailCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailMaxAggregateInputType
}

export type GetEmailAggregateType<T extends EmailAggregateArgs> = {
      [P in keyof T & keyof AggregateEmail]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmail[P]>
    : Prisma.GetScalarType<T[P], AggregateEmail[P]>
}




export type EmailGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailWhereInput
  orderBy?: Prisma.EmailOrderByWithAggregationInput | Prisma.EmailOrderByWithAggregationInput[]
  by: Prisma.EmailScalarFieldEnum[] | Prisma.EmailScalarFieldEnum
  having?: Prisma.EmailScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailCountAggregateInputType | true
  _min?: EmailMinAggregateInputType
  _max?: EmailMaxAggregateInputType
}

export type EmailGroupByOutputType = {
  id: string
  userId: string
  subject: string
  htmlBody: string
  textBody: string | null
  scheduledFor: Date
  status: $Enums.EmailStatus
  sentAt: Date | null
  resendEmailId: string | null
  error: string | null
  createdAt: Date
  updatedAt: Date
  _count: EmailCountAggregateOutputType | null
  _min: EmailMinAggregateOutputType | null
  _max: EmailMaxAggregateOutputType | null
}

type GetEmailGroupByPayload<T extends EmailGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailGroupByOutputType[P]>
      }
    >
  >



export type EmailWhereInput = {
  AND?: Prisma.EmailWhereInput | Prisma.EmailWhereInput[]
  OR?: Prisma.EmailWhereInput[]
  NOT?: Prisma.EmailWhereInput | Prisma.EmailWhereInput[]
  id?: Prisma.StringFilter<"Email"> | string
  userId?: Prisma.StringFilter<"Email"> | string
  subject?: Prisma.StringFilter<"Email"> | string
  htmlBody?: Prisma.StringFilter<"Email"> | string
  textBody?: Prisma.StringNullableFilter<"Email"> | string | null
  scheduledFor?: Prisma.DateTimeFilter<"Email"> | Date | string
  status?: Prisma.EnumEmailStatusFilter<"Email"> | $Enums.EmailStatus
  sentAt?: Prisma.DateTimeNullableFilter<"Email"> | Date | string | null
  resendEmailId?: Prisma.StringNullableFilter<"Email"> | string | null
  error?: Prisma.StringNullableFilter<"Email"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Email"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Email"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  recipients?: Prisma.EmailRecipientListRelationFilter
}

export type EmailOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  htmlBody?: Prisma.SortOrder
  textBody?: Prisma.SortOrderInput | Prisma.SortOrder
  scheduledFor?: Prisma.SortOrder
  status?: Prisma.SortOrder
  sentAt?: Prisma.SortOrderInput | Prisma.SortOrder
  resendEmailId?: Prisma.SortOrderInput | Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  recipients?: Prisma.EmailRecipientOrderByRelationAggregateInput
}

export type EmailWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmailWhereInput | Prisma.EmailWhereInput[]
  OR?: Prisma.EmailWhereInput[]
  NOT?: Prisma.EmailWhereInput | Prisma.EmailWhereInput[]
  userId?: Prisma.StringFilter<"Email"> | string
  subject?: Prisma.StringFilter<"Email"> | string
  htmlBody?: Prisma.StringFilter<"Email"> | string
  textBody?: Prisma.StringNullableFilter<"Email"> | string | null
  scheduledFor?: Prisma.DateTimeFilter<"Email"> | Date | string
  status?: Prisma.EnumEmailStatusFilter<"Email"> | $Enums.EmailStatus
  sentAt?: Prisma.DateTimeNullableFilter<"Email"> | Date | string | null
  resendEmailId?: Prisma.StringNullableFilter<"Email"> | string | null
  error?: Prisma.StringNullableFilter<"Email"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Email"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Email"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  recipients?: Prisma.EmailRecipientListRelationFilter
}, "id">

export type EmailOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  htmlBody?: Prisma.SortOrder
  textBody?: Prisma.SortOrderInput | Prisma.SortOrder
  scheduledFor?: Prisma.SortOrder
  status?: Prisma.SortOrder
  sentAt?: Prisma.SortOrderInput | Prisma.SortOrder
  resendEmailId?: Prisma.SortOrderInput | Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmailCountOrderByAggregateInput
  _max?: Prisma.EmailMaxOrderByAggregateInput
  _min?: Prisma.EmailMinOrderByAggregateInput
}

export type EmailScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailScalarWhereWithAggregatesInput | Prisma.EmailScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailScalarWhereWithAggregatesInput | Prisma.EmailScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Email"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Email"> | string
  subject?: Prisma.StringWithAggregatesFilter<"Email"> | string
  htmlBody?: Prisma.StringWithAggregatesFilter<"Email"> | string
  textBody?: Prisma.StringNullableWithAggregatesFilter<"Email"> | string | null
  scheduledFor?: Prisma.DateTimeWithAggregatesFilter<"Email"> | Date | string
  status?: Prisma.EnumEmailStatusWithAggregatesFilter<"Email"> | $Enums.EmailStatus
  sentAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Email"> | Date | string | null
  resendEmailId?: Prisma.StringNullableWithAggregatesFilter<"Email"> | string | null
  error?: Prisma.StringNullableWithAggregatesFilter<"Email"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Email"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Email"> | Date | string
}

export type EmailCreateInput = {
  id?: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutEmailsInput
  recipients?: Prisma.EmailRecipientCreateNestedManyWithoutEmailInput
}

export type EmailUncheckedCreateInput = {
  id?: string
  userId: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  recipients?: Prisma.EmailRecipientUncheckedCreateNestedManyWithoutEmailInput
}

export type EmailUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutEmailsNestedInput
  recipients?: Prisma.EmailRecipientUpdateManyWithoutEmailNestedInput
}

export type EmailUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  recipients?: Prisma.EmailRecipientUncheckedUpdateManyWithoutEmailNestedInput
}

export type EmailCreateManyInput = {
  id?: string
  userId: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailListRelationFilter = {
  every?: Prisma.EmailWhereInput
  some?: Prisma.EmailWhereInput
  none?: Prisma.EmailWhereInput
}

export type EmailOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmailCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  htmlBody?: Prisma.SortOrder
  textBody?: Prisma.SortOrder
  scheduledFor?: Prisma.SortOrder
  status?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  resendEmailId?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  htmlBody?: Prisma.SortOrder
  textBody?: Prisma.SortOrder
  scheduledFor?: Prisma.SortOrder
  status?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  resendEmailId?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  subject?: Prisma.SortOrder
  htmlBody?: Prisma.SortOrder
  textBody?: Prisma.SortOrder
  scheduledFor?: Prisma.SortOrder
  status?: Prisma.SortOrder
  sentAt?: Prisma.SortOrder
  resendEmailId?: Prisma.SortOrder
  error?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailScalarRelationFilter = {
  is?: Prisma.EmailWhereInput
  isNot?: Prisma.EmailWhereInput
}

export type EmailCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailCreateWithoutUserInput, Prisma.EmailUncheckedCreateWithoutUserInput> | Prisma.EmailCreateWithoutUserInput[] | Prisma.EmailUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailCreateOrConnectWithoutUserInput | Prisma.EmailCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EmailCreateManyUserInputEnvelope
  connect?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
}

export type EmailUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailCreateWithoutUserInput, Prisma.EmailUncheckedCreateWithoutUserInput> | Prisma.EmailCreateWithoutUserInput[] | Prisma.EmailUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailCreateOrConnectWithoutUserInput | Prisma.EmailCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EmailCreateManyUserInputEnvelope
  connect?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
}

export type EmailUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailCreateWithoutUserInput, Prisma.EmailUncheckedCreateWithoutUserInput> | Prisma.EmailCreateWithoutUserInput[] | Prisma.EmailUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailCreateOrConnectWithoutUserInput | Prisma.EmailCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EmailUpsertWithWhereUniqueWithoutUserInput | Prisma.EmailUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EmailCreateManyUserInputEnvelope
  set?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  disconnect?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  delete?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  connect?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  update?: Prisma.EmailUpdateWithWhereUniqueWithoutUserInput | Prisma.EmailUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EmailUpdateManyWithWhereWithoutUserInput | Prisma.EmailUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EmailScalarWhereInput | Prisma.EmailScalarWhereInput[]
}

export type EmailUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailCreateWithoutUserInput, Prisma.EmailUncheckedCreateWithoutUserInput> | Prisma.EmailCreateWithoutUserInput[] | Prisma.EmailUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailCreateOrConnectWithoutUserInput | Prisma.EmailCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EmailUpsertWithWhereUniqueWithoutUserInput | Prisma.EmailUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EmailCreateManyUserInputEnvelope
  set?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  disconnect?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  delete?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  connect?: Prisma.EmailWhereUniqueInput | Prisma.EmailWhereUniqueInput[]
  update?: Prisma.EmailUpdateWithWhereUniqueWithoutUserInput | Prisma.EmailUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EmailUpdateManyWithWhereWithoutUserInput | Prisma.EmailUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EmailScalarWhereInput | Prisma.EmailScalarWhereInput[]
}

export type EnumEmailStatusFieldUpdateOperationsInput = {
  set?: $Enums.EmailStatus
}

export type EmailCreateNestedOneWithoutRecipientsInput = {
  create?: Prisma.XOR<Prisma.EmailCreateWithoutRecipientsInput, Prisma.EmailUncheckedCreateWithoutRecipientsInput>
  connectOrCreate?: Prisma.EmailCreateOrConnectWithoutRecipientsInput
  connect?: Prisma.EmailWhereUniqueInput
}

export type EmailUpdateOneRequiredWithoutRecipientsNestedInput = {
  create?: Prisma.XOR<Prisma.EmailCreateWithoutRecipientsInput, Prisma.EmailUncheckedCreateWithoutRecipientsInput>
  connectOrCreate?: Prisma.EmailCreateOrConnectWithoutRecipientsInput
  upsert?: Prisma.EmailUpsertWithoutRecipientsInput
  connect?: Prisma.EmailWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmailUpdateToOneWithWhereWithoutRecipientsInput, Prisma.EmailUpdateWithoutRecipientsInput>, Prisma.EmailUncheckedUpdateWithoutRecipientsInput>
}

export type EmailCreateWithoutUserInput = {
  id?: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  recipients?: Prisma.EmailRecipientCreateNestedManyWithoutEmailInput
}

export type EmailUncheckedCreateWithoutUserInput = {
  id?: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  recipients?: Prisma.EmailRecipientUncheckedCreateNestedManyWithoutEmailInput
}

export type EmailCreateOrConnectWithoutUserInput = {
  where: Prisma.EmailWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailCreateWithoutUserInput, Prisma.EmailUncheckedCreateWithoutUserInput>
}

export type EmailCreateManyUserInputEnvelope = {
  data: Prisma.EmailCreateManyUserInput | Prisma.EmailCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type EmailUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailUpdateWithoutUserInput, Prisma.EmailUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.EmailCreateWithoutUserInput, Prisma.EmailUncheckedCreateWithoutUserInput>
}

export type EmailUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailUpdateWithoutUserInput, Prisma.EmailUncheckedUpdateWithoutUserInput>
}

export type EmailUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.EmailScalarWhereInput
  data: Prisma.XOR<Prisma.EmailUpdateManyMutationInput, Prisma.EmailUncheckedUpdateManyWithoutUserInput>
}

export type EmailScalarWhereInput = {
  AND?: Prisma.EmailScalarWhereInput | Prisma.EmailScalarWhereInput[]
  OR?: Prisma.EmailScalarWhereInput[]
  NOT?: Prisma.EmailScalarWhereInput | Prisma.EmailScalarWhereInput[]
  id?: Prisma.StringFilter<"Email"> | string
  userId?: Prisma.StringFilter<"Email"> | string
  subject?: Prisma.StringFilter<"Email"> | string
  htmlBody?: Prisma.StringFilter<"Email"> | string
  textBody?: Prisma.StringNullableFilter<"Email"> | string | null
  scheduledFor?: Prisma.DateTimeFilter<"Email"> | Date | string
  status?: Prisma.EnumEmailStatusFilter<"Email"> | $Enums.EmailStatus
  sentAt?: Prisma.DateTimeNullableFilter<"Email"> | Date | string | null
  resendEmailId?: Prisma.StringNullableFilter<"Email"> | string | null
  error?: Prisma.StringNullableFilter<"Email"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Email"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Email"> | Date | string
}

export type EmailCreateWithoutRecipientsInput = {
  id?: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutEmailsInput
}

export type EmailUncheckedCreateWithoutRecipientsInput = {
  id?: string
  userId: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailCreateOrConnectWithoutRecipientsInput = {
  where: Prisma.EmailWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailCreateWithoutRecipientsInput, Prisma.EmailUncheckedCreateWithoutRecipientsInput>
}

export type EmailUpsertWithoutRecipientsInput = {
  update: Prisma.XOR<Prisma.EmailUpdateWithoutRecipientsInput, Prisma.EmailUncheckedUpdateWithoutRecipientsInput>
  create: Prisma.XOR<Prisma.EmailCreateWithoutRecipientsInput, Prisma.EmailUncheckedCreateWithoutRecipientsInput>
  where?: Prisma.EmailWhereInput
}

export type EmailUpdateToOneWithWhereWithoutRecipientsInput = {
  where?: Prisma.EmailWhereInput
  data: Prisma.XOR<Prisma.EmailUpdateWithoutRecipientsInput, Prisma.EmailUncheckedUpdateWithoutRecipientsInput>
}

export type EmailUpdateWithoutRecipientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutEmailsNestedInput
}

export type EmailUncheckedUpdateWithoutRecipientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailCreateManyUserInput = {
  id?: string
  subject: string
  htmlBody: string
  textBody?: string | null
  scheduledFor: Date | string
  status?: $Enums.EmailStatus
  sentAt?: Date | string | null
  resendEmailId?: string | null
  error?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  recipients?: Prisma.EmailRecipientUpdateManyWithoutEmailNestedInput
}

export type EmailUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  recipients?: Prisma.EmailRecipientUncheckedUpdateManyWithoutEmailNestedInput
}

export type EmailUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  subject?: Prisma.StringFieldUpdateOperationsInput | string
  htmlBody?: Prisma.StringFieldUpdateOperationsInput | string
  textBody?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scheduledFor?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
  sentAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type EmailCountOutputType
 */

export type EmailCountOutputType = {
  recipients: number
}

export type EmailCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  recipients?: boolean | EmailCountOutputTypeCountRecipientsArgs
}

/**
 * EmailCountOutputType without action
 */
export type EmailCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailCountOutputType
   */
  select?: Prisma.EmailCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EmailCountOutputType without action
 */
export type EmailCountOutputTypeCountRecipientsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailRecipientWhereInput
}


export type EmailSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  subject?: boolean
  htmlBody?: boolean
  textBody?: boolean
  scheduledFor?: boolean
  status?: boolean
  sentAt?: boolean
  resendEmailId?: boolean
  error?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  recipients?: boolean | Prisma.Email$recipientsArgs<ExtArgs>
  _count?: boolean | Prisma.EmailCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["email"]>

export type EmailSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  subject?: boolean
  htmlBody?: boolean
  textBody?: boolean
  scheduledFor?: boolean
  status?: boolean
  sentAt?: boolean
  resendEmailId?: boolean
  error?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["email"]>

export type EmailSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  subject?: boolean
  htmlBody?: boolean
  textBody?: boolean
  scheduledFor?: boolean
  status?: boolean
  sentAt?: boolean
  resendEmailId?: boolean
  error?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["email"]>

export type EmailSelectScalar = {
  id?: boolean
  userId?: boolean
  subject?: boolean
  htmlBody?: boolean
  textBody?: boolean
  scheduledFor?: boolean
  status?: boolean
  sentAt?: boolean
  resendEmailId?: boolean
  error?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmailOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "subject" | "htmlBody" | "textBody" | "scheduledFor" | "status" | "sentAt" | "resendEmailId" | "error" | "createdAt" | "updatedAt", ExtArgs["result"]["email"]>
export type EmailInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  recipients?: boolean | Prisma.Email$recipientsArgs<ExtArgs>
  _count?: boolean | Prisma.EmailCountOutputTypeDefaultArgs<ExtArgs>
}
export type EmailIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EmailIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EmailPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Email"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    recipients: Prisma.$EmailRecipientPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    subject: string
    htmlBody: string
    textBody: string | null
    scheduledFor: Date
    status: $Enums.EmailStatus
    sentAt: Date | null
    resendEmailId: string | null
    error: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["email"]>
  composites: {}
}

export type EmailGetPayload<S extends boolean | null | undefined | EmailDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailPayload, S>

export type EmailCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailCountAggregateInputType | true
  }

export interface EmailDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Email'], meta: { name: 'Email' } }
  /**
   * Find zero or one Email that matches the filter.
   * @param {EmailFindUniqueArgs} args - Arguments to find a Email
   * @example
   * // Get one Email
   * const email = await prisma.email.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Email that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailFindUniqueOrThrowArgs} args - Arguments to find a Email
   * @example
   * // Get one Email
   * const email = await prisma.email.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Email that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailFindFirstArgs} args - Arguments to find a Email
   * @example
   * // Get one Email
   * const email = await prisma.email.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Email that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailFindFirstOrThrowArgs} args - Arguments to find a Email
   * @example
   * // Get one Email
   * const email = await prisma.email.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Emails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Emails
   * const emails = await prisma.email.findMany()
   * 
   * // Get first 10 Emails
   * const emails = await prisma.email.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailWithIdOnly = await prisma.email.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailFindManyArgs>(args?: Prisma.SelectSubset<T, EmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Email.
   * @param {EmailCreateArgs} args - Arguments to create a Email.
   * @example
   * // Create one Email
   * const Email = await prisma.email.create({
   *   data: {
   *     // ... data to create a Email
   *   }
   * })
   * 
   */
  create<T extends EmailCreateArgs>(args: Prisma.SelectSubset<T, EmailCreateArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Emails.
   * @param {EmailCreateManyArgs} args - Arguments to create many Emails.
   * @example
   * // Create many Emails
   * const email = await prisma.email.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Emails and returns the data saved in the database.
   * @param {EmailCreateManyAndReturnArgs} args - Arguments to create many Emails.
   * @example
   * // Create many Emails
   * const email = await prisma.email.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Emails and only return the `id`
   * const emailWithIdOnly = await prisma.email.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Email.
   * @param {EmailDeleteArgs} args - Arguments to delete one Email.
   * @example
   * // Delete one Email
   * const Email = await prisma.email.delete({
   *   where: {
   *     // ... filter to delete one Email
   *   }
   * })
   * 
   */
  delete<T extends EmailDeleteArgs>(args: Prisma.SelectSubset<T, EmailDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Email.
   * @param {EmailUpdateArgs} args - Arguments to update one Email.
   * @example
   * // Update one Email
   * const email = await prisma.email.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailUpdateArgs>(args: Prisma.SelectSubset<T, EmailUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Emails.
   * @param {EmailDeleteManyArgs} args - Arguments to filter Emails to delete.
   * @example
   * // Delete a few Emails
   * const { count } = await prisma.email.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Emails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Emails
   * const email = await prisma.email.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Emails and returns the data updated in the database.
   * @param {EmailUpdateManyAndReturnArgs} args - Arguments to update many Emails.
   * @example
   * // Update many Emails
   * const email = await prisma.email.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Emails and only return the `id`
   * const emailWithIdOnly = await prisma.email.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Email.
   * @param {EmailUpsertArgs} args - Arguments to update or create a Email.
   * @example
   * // Update or create a Email
   * const email = await prisma.email.upsert({
   *   create: {
   *     // ... data to create a Email
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Email we want to update
   *   }
   * })
   */
  upsert<T extends EmailUpsertArgs>(args: Prisma.SelectSubset<T, EmailUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Emails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailCountArgs} args - Arguments to filter Emails to count.
   * @example
   * // Count the number of Emails
   * const count = await prisma.email.count({
   *   where: {
   *     // ... the filter for the Emails we want to count
   *   }
   * })
  **/
  count<T extends EmailCountArgs>(
    args?: Prisma.Subset<T, EmailCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Email.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailAggregateArgs>(args: Prisma.Subset<T, EmailAggregateArgs>): Prisma.PrismaPromise<GetEmailAggregateType<T>>

  /**
   * Group by Email.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailGroupByArgs['orderBy'] }
      : { orderBy?: EmailGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Email model
 */
readonly fields: EmailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Email.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  recipients<T extends Prisma.Email$recipientsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Email$recipientsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Email model
 */
export interface EmailFieldRefs {
  readonly id: Prisma.FieldRef<"Email", 'String'>
  readonly userId: Prisma.FieldRef<"Email", 'String'>
  readonly subject: Prisma.FieldRef<"Email", 'String'>
  readonly htmlBody: Prisma.FieldRef<"Email", 'String'>
  readonly textBody: Prisma.FieldRef<"Email", 'String'>
  readonly scheduledFor: Prisma.FieldRef<"Email", 'DateTime'>
  readonly status: Prisma.FieldRef<"Email", 'EmailStatus'>
  readonly sentAt: Prisma.FieldRef<"Email", 'DateTime'>
  readonly resendEmailId: Prisma.FieldRef<"Email", 'String'>
  readonly error: Prisma.FieldRef<"Email", 'String'>
  readonly createdAt: Prisma.FieldRef<"Email", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Email", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Email findUnique
 */
export type EmailFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * Filter, which Email to fetch.
   */
  where: Prisma.EmailWhereUniqueInput
}

/**
 * Email findUniqueOrThrow
 */
export type EmailFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * Filter, which Email to fetch.
   */
  where: Prisma.EmailWhereUniqueInput
}

/**
 * Email findFirst
 */
export type EmailFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * Filter, which Email to fetch.
   */
  where?: Prisma.EmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Emails to fetch.
   */
  orderBy?: Prisma.EmailOrderByWithRelationInput | Prisma.EmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Emails.
   */
  cursor?: Prisma.EmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Emails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Emails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Emails.
   */
  distinct?: Prisma.EmailScalarFieldEnum | Prisma.EmailScalarFieldEnum[]
}

/**
 * Email findFirstOrThrow
 */
export type EmailFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * Filter, which Email to fetch.
   */
  where?: Prisma.EmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Emails to fetch.
   */
  orderBy?: Prisma.EmailOrderByWithRelationInput | Prisma.EmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Emails.
   */
  cursor?: Prisma.EmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Emails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Emails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Emails.
   */
  distinct?: Prisma.EmailScalarFieldEnum | Prisma.EmailScalarFieldEnum[]
}

/**
 * Email findMany
 */
export type EmailFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * Filter, which Emails to fetch.
   */
  where?: Prisma.EmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Emails to fetch.
   */
  orderBy?: Prisma.EmailOrderByWithRelationInput | Prisma.EmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Emails.
   */
  cursor?: Prisma.EmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Emails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Emails.
   */
  skip?: number
  distinct?: Prisma.EmailScalarFieldEnum | Prisma.EmailScalarFieldEnum[]
}

/**
 * Email create
 */
export type EmailCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * The data needed to create a Email.
   */
  data: Prisma.XOR<Prisma.EmailCreateInput, Prisma.EmailUncheckedCreateInput>
}

/**
 * Email createMany
 */
export type EmailCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Emails.
   */
  data: Prisma.EmailCreateManyInput | Prisma.EmailCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Email createManyAndReturn
 */
export type EmailCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * The data used to create many Emails.
   */
  data: Prisma.EmailCreateManyInput | Prisma.EmailCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Email update
 */
export type EmailUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * The data needed to update a Email.
   */
  data: Prisma.XOR<Prisma.EmailUpdateInput, Prisma.EmailUncheckedUpdateInput>
  /**
   * Choose, which Email to update.
   */
  where: Prisma.EmailWhereUniqueInput
}

/**
 * Email updateMany
 */
export type EmailUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Emails.
   */
  data: Prisma.XOR<Prisma.EmailUpdateManyMutationInput, Prisma.EmailUncheckedUpdateManyInput>
  /**
   * Filter which Emails to update
   */
  where?: Prisma.EmailWhereInput
  /**
   * Limit how many Emails to update.
   */
  limit?: number
}

/**
 * Email updateManyAndReturn
 */
export type EmailUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * The data used to update Emails.
   */
  data: Prisma.XOR<Prisma.EmailUpdateManyMutationInput, Prisma.EmailUncheckedUpdateManyInput>
  /**
   * Filter which Emails to update
   */
  where?: Prisma.EmailWhereInput
  /**
   * Limit how many Emails to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Email upsert
 */
export type EmailUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * The filter to search for the Email to update in case it exists.
   */
  where: Prisma.EmailWhereUniqueInput
  /**
   * In case the Email found by the `where` argument doesn't exist, create a new Email with this data.
   */
  create: Prisma.XOR<Prisma.EmailCreateInput, Prisma.EmailUncheckedCreateInput>
  /**
   * In case the Email was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailUpdateInput, Prisma.EmailUncheckedUpdateInput>
}

/**
 * Email delete
 */
export type EmailDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  /**
   * Filter which Email to delete.
   */
  where: Prisma.EmailWhereUniqueInput
}

/**
 * Email deleteMany
 */
export type EmailDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Emails to delete
   */
  where?: Prisma.EmailWhereInput
  /**
   * Limit how many Emails to delete.
   */
  limit?: number
}

/**
 * Email.recipients
 */
export type Email$recipientsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  where?: Prisma.EmailRecipientWhereInput
  orderBy?: Prisma.EmailRecipientOrderByWithRelationInput | Prisma.EmailRecipientOrderByWithRelationInput[]
  cursor?: Prisma.EmailRecipientWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmailRecipientScalarFieldEnum | Prisma.EmailRecipientScalarFieldEnum[]
}

/**
 * Email without action
 */
export type EmailDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
}
