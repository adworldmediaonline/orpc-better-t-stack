
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `EmailRecipient` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EmailRecipient
 * 
 */
export type EmailRecipientModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailRecipientPayload>

export type AggregateEmailRecipient = {
  _count: EmailRecipientCountAggregateOutputType | null
  _min: EmailRecipientMinAggregateOutputType | null
  _max: EmailRecipientMaxAggregateOutputType | null
}

export type EmailRecipientMinAggregateOutputType = {
  id: string | null
  emailId: string | null
  recipientEmail: string | null
  recipientName: string | null
  status: $Enums.RecipientStatus | null
  deliveredAt: Date | null
  openedAt: Date | null
  clickedAt: Date | null
  bouncedAt: Date | null
  complaintAt: Date | null
  resendEmailId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmailRecipientMaxAggregateOutputType = {
  id: string | null
  emailId: string | null
  recipientEmail: string | null
  recipientName: string | null
  status: $Enums.RecipientStatus | null
  deliveredAt: Date | null
  openedAt: Date | null
  clickedAt: Date | null
  bouncedAt: Date | null
  complaintAt: Date | null
  resendEmailId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmailRecipientCountAggregateOutputType = {
  id: number
  emailId: number
  recipientEmail: number
  recipientName: number
  status: number
  deliveredAt: number
  openedAt: number
  clickedAt: number
  bouncedAt: number
  complaintAt: number
  resendEmailId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmailRecipientMinAggregateInputType = {
  id?: true
  emailId?: true
  recipientEmail?: true
  recipientName?: true
  status?: true
  deliveredAt?: true
  openedAt?: true
  clickedAt?: true
  bouncedAt?: true
  complaintAt?: true
  resendEmailId?: true
  createdAt?: true
  updatedAt?: true
}

export type EmailRecipientMaxAggregateInputType = {
  id?: true
  emailId?: true
  recipientEmail?: true
  recipientName?: true
  status?: true
  deliveredAt?: true
  openedAt?: true
  clickedAt?: true
  bouncedAt?: true
  complaintAt?: true
  resendEmailId?: true
  createdAt?: true
  updatedAt?: true
}

export type EmailRecipientCountAggregateInputType = {
  id?: true
  emailId?: true
  recipientEmail?: true
  recipientName?: true
  status?: true
  deliveredAt?: true
  openedAt?: true
  clickedAt?: true
  bouncedAt?: true
  complaintAt?: true
  resendEmailId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmailRecipientAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailRecipient to aggregate.
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?: Prisma.EmailRecipientOrderByWithRelationInput | Prisma.EmailRecipientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailRecipients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailRecipients
  **/
  _count?: true | EmailRecipientCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailRecipientMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailRecipientMaxAggregateInputType
}

export type GetEmailRecipientAggregateType<T extends EmailRecipientAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailRecipient]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailRecipient[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailRecipient[P]>
}




export type EmailRecipientGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailRecipientWhereInput
  orderBy?: Prisma.EmailRecipientOrderByWithAggregationInput | Prisma.EmailRecipientOrderByWithAggregationInput[]
  by: Prisma.EmailRecipientScalarFieldEnum[] | Prisma.EmailRecipientScalarFieldEnum
  having?: Prisma.EmailRecipientScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailRecipientCountAggregateInputType | true
  _min?: EmailRecipientMinAggregateInputType
  _max?: EmailRecipientMaxAggregateInputType
}

export type EmailRecipientGroupByOutputType = {
  id: string
  emailId: string
  recipientEmail: string
  recipientName: string | null
  status: $Enums.RecipientStatus
  deliveredAt: Date | null
  openedAt: Date | null
  clickedAt: Date | null
  bouncedAt: Date | null
  complaintAt: Date | null
  resendEmailId: string | null
  createdAt: Date
  updatedAt: Date
  _count: EmailRecipientCountAggregateOutputType | null
  _min: EmailRecipientMinAggregateOutputType | null
  _max: EmailRecipientMaxAggregateOutputType | null
}

type GetEmailRecipientGroupByPayload<T extends EmailRecipientGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailRecipientGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailRecipientGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailRecipientGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailRecipientGroupByOutputType[P]>
      }
    >
  >



export type EmailRecipientWhereInput = {
  AND?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[]
  OR?: Prisma.EmailRecipientWhereInput[]
  NOT?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[]
  id?: Prisma.StringFilter<"EmailRecipient"> | string
  emailId?: Prisma.StringFilter<"EmailRecipient"> | string
  recipientEmail?: Prisma.StringFilter<"EmailRecipient"> | string
  recipientName?: Prisma.StringNullableFilter<"EmailRecipient"> | string | null
  status?: Prisma.EnumRecipientStatusFilter<"EmailRecipient"> | $Enums.RecipientStatus
  deliveredAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  openedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  clickedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  bouncedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  complaintAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  resendEmailId?: Prisma.StringNullableFilter<"EmailRecipient"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailRecipient"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmailRecipient"> | Date | string
  email?: Prisma.XOR<Prisma.EmailScalarRelationFilter, Prisma.EmailWhereInput>
  events?: Prisma.EmailEventListRelationFilter
}

export type EmailRecipientOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  emailId?: Prisma.SortOrder
  recipientEmail?: Prisma.SortOrder
  recipientName?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  openedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  clickedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  bouncedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  complaintAt?: Prisma.SortOrderInput | Prisma.SortOrder
  resendEmailId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.EmailOrderByWithRelationInput
  events?: Prisma.EmailEventOrderByRelationAggregateInput
}

export type EmailRecipientWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[]
  OR?: Prisma.EmailRecipientWhereInput[]
  NOT?: Prisma.EmailRecipientWhereInput | Prisma.EmailRecipientWhereInput[]
  emailId?: Prisma.StringFilter<"EmailRecipient"> | string
  recipientEmail?: Prisma.StringFilter<"EmailRecipient"> | string
  recipientName?: Prisma.StringNullableFilter<"EmailRecipient"> | string | null
  status?: Prisma.EnumRecipientStatusFilter<"EmailRecipient"> | $Enums.RecipientStatus
  deliveredAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  openedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  clickedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  bouncedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  complaintAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  resendEmailId?: Prisma.StringNullableFilter<"EmailRecipient"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailRecipient"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmailRecipient"> | Date | string
  email?: Prisma.XOR<Prisma.EmailScalarRelationFilter, Prisma.EmailWhereInput>
  events?: Prisma.EmailEventListRelationFilter
}, "id">

export type EmailRecipientOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  emailId?: Prisma.SortOrder
  recipientEmail?: Prisma.SortOrder
  recipientName?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrderInput | Prisma.SortOrder
  openedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  clickedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  bouncedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  complaintAt?: Prisma.SortOrderInput | Prisma.SortOrder
  resendEmailId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmailRecipientCountOrderByAggregateInput
  _max?: Prisma.EmailRecipientMaxOrderByAggregateInput
  _min?: Prisma.EmailRecipientMinOrderByAggregateInput
}

export type EmailRecipientScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailRecipientScalarWhereWithAggregatesInput | Prisma.EmailRecipientScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailRecipientScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailRecipientScalarWhereWithAggregatesInput | Prisma.EmailRecipientScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EmailRecipient"> | string
  emailId?: Prisma.StringWithAggregatesFilter<"EmailRecipient"> | string
  recipientEmail?: Prisma.StringWithAggregatesFilter<"EmailRecipient"> | string
  recipientName?: Prisma.StringNullableWithAggregatesFilter<"EmailRecipient"> | string | null
  status?: Prisma.EnumRecipientStatusWithAggregatesFilter<"EmailRecipient"> | $Enums.RecipientStatus
  deliveredAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient"> | Date | string | null
  openedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient"> | Date | string | null
  clickedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient"> | Date | string | null
  bouncedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient"> | Date | string | null
  complaintAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailRecipient"> | Date | string | null
  resendEmailId?: Prisma.StringNullableWithAggregatesFilter<"EmailRecipient"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EmailRecipient"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EmailRecipient"> | Date | string
}

export type EmailRecipientCreateInput = {
  id?: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  email: Prisma.EmailCreateNestedOneWithoutRecipientsInput
  events?: Prisma.EmailEventCreateNestedManyWithoutRecipientInput
}

export type EmailRecipientUncheckedCreateInput = {
  id?: string
  emailId: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EmailEventUncheckedCreateNestedManyWithoutRecipientInput
}

export type EmailRecipientUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.EmailUpdateOneRequiredWithoutRecipientsNestedInput
  events?: Prisma.EmailEventUpdateManyWithoutRecipientNestedInput
}

export type EmailRecipientUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emailId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EmailEventUncheckedUpdateManyWithoutRecipientNestedInput
}

export type EmailRecipientCreateManyInput = {
  id?: string
  emailId: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailRecipientUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailRecipientUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emailId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailRecipientListRelationFilter = {
  every?: Prisma.EmailRecipientWhereInput
  some?: Prisma.EmailRecipientWhereInput
  none?: Prisma.EmailRecipientWhereInput
}

export type EmailRecipientOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmailRecipientCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  emailId?: Prisma.SortOrder
  recipientEmail?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  status?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrder
  openedAt?: Prisma.SortOrder
  clickedAt?: Prisma.SortOrder
  bouncedAt?: Prisma.SortOrder
  complaintAt?: Prisma.SortOrder
  resendEmailId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailRecipientMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  emailId?: Prisma.SortOrder
  recipientEmail?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  status?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrder
  openedAt?: Prisma.SortOrder
  clickedAt?: Prisma.SortOrder
  bouncedAt?: Prisma.SortOrder
  complaintAt?: Prisma.SortOrder
  resendEmailId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailRecipientMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  emailId?: Prisma.SortOrder
  recipientEmail?: Prisma.SortOrder
  recipientName?: Prisma.SortOrder
  status?: Prisma.SortOrder
  deliveredAt?: Prisma.SortOrder
  openedAt?: Prisma.SortOrder
  clickedAt?: Prisma.SortOrder
  bouncedAt?: Prisma.SortOrder
  complaintAt?: Prisma.SortOrder
  resendEmailId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailRecipientScalarRelationFilter = {
  is?: Prisma.EmailRecipientWhereInput
  isNot?: Prisma.EmailRecipientWhereInput
}

export type EmailRecipientCreateNestedManyWithoutEmailInput = {
  create?: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEmailInput, Prisma.EmailRecipientUncheckedCreateWithoutEmailInput> | Prisma.EmailRecipientCreateWithoutEmailInput[] | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[]
  connectOrCreate?: Prisma.EmailRecipientCreateOrConnectWithoutEmailInput | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[]
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope
  connect?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
}

export type EmailRecipientUncheckedCreateNestedManyWithoutEmailInput = {
  create?: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEmailInput, Prisma.EmailRecipientUncheckedCreateWithoutEmailInput> | Prisma.EmailRecipientCreateWithoutEmailInput[] | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[]
  connectOrCreate?: Prisma.EmailRecipientCreateOrConnectWithoutEmailInput | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[]
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope
  connect?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
}

export type EmailRecipientUpdateManyWithoutEmailNestedInput = {
  create?: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEmailInput, Prisma.EmailRecipientUncheckedCreateWithoutEmailInput> | Prisma.EmailRecipientCreateWithoutEmailInput[] | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[]
  connectOrCreate?: Prisma.EmailRecipientCreateOrConnectWithoutEmailInput | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[]
  upsert?: Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput[]
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope
  set?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  disconnect?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  delete?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  connect?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  update?: Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput[]
  updateMany?: Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput | Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput[]
  deleteMany?: Prisma.EmailRecipientScalarWhereInput | Prisma.EmailRecipientScalarWhereInput[]
}

export type EmailRecipientUncheckedUpdateManyWithoutEmailNestedInput = {
  create?: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEmailInput, Prisma.EmailRecipientUncheckedCreateWithoutEmailInput> | Prisma.EmailRecipientCreateWithoutEmailInput[] | Prisma.EmailRecipientUncheckedCreateWithoutEmailInput[]
  connectOrCreate?: Prisma.EmailRecipientCreateOrConnectWithoutEmailInput | Prisma.EmailRecipientCreateOrConnectWithoutEmailInput[]
  upsert?: Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput | Prisma.EmailRecipientUpsertWithWhereUniqueWithoutEmailInput[]
  createMany?: Prisma.EmailRecipientCreateManyEmailInputEnvelope
  set?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  disconnect?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  delete?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  connect?: Prisma.EmailRecipientWhereUniqueInput | Prisma.EmailRecipientWhereUniqueInput[]
  update?: Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput | Prisma.EmailRecipientUpdateWithWhereUniqueWithoutEmailInput[]
  updateMany?: Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput | Prisma.EmailRecipientUpdateManyWithWhereWithoutEmailInput[]
  deleteMany?: Prisma.EmailRecipientScalarWhereInput | Prisma.EmailRecipientScalarWhereInput[]
}

export type EnumRecipientStatusFieldUpdateOperationsInput = {
  set?: $Enums.RecipientStatus
}

export type EmailRecipientCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEventsInput, Prisma.EmailRecipientUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.EmailRecipientCreateOrConnectWithoutEventsInput
  connect?: Prisma.EmailRecipientWhereUniqueInput
}

export type EmailRecipientUpdateOneRequiredWithoutEventsNestedInput = {
  create?: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEventsInput, Prisma.EmailRecipientUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.EmailRecipientCreateOrConnectWithoutEventsInput
  upsert?: Prisma.EmailRecipientUpsertWithoutEventsInput
  connect?: Prisma.EmailRecipientWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmailRecipientUpdateToOneWithWhereWithoutEventsInput, Prisma.EmailRecipientUpdateWithoutEventsInput>, Prisma.EmailRecipientUncheckedUpdateWithoutEventsInput>
}

export type EmailRecipientCreateWithoutEmailInput = {
  id?: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EmailEventCreateNestedManyWithoutRecipientInput
}

export type EmailRecipientUncheckedCreateWithoutEmailInput = {
  id?: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EmailEventUncheckedCreateNestedManyWithoutRecipientInput
}

export type EmailRecipientCreateOrConnectWithoutEmailInput = {
  where: Prisma.EmailRecipientWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEmailInput, Prisma.EmailRecipientUncheckedCreateWithoutEmailInput>
}

export type EmailRecipientCreateManyEmailInputEnvelope = {
  data: Prisma.EmailRecipientCreateManyEmailInput | Prisma.EmailRecipientCreateManyEmailInput[]
  skipDuplicates?: boolean
}

export type EmailRecipientUpsertWithWhereUniqueWithoutEmailInput = {
  where: Prisma.EmailRecipientWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailRecipientUpdateWithoutEmailInput, Prisma.EmailRecipientUncheckedUpdateWithoutEmailInput>
  create: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEmailInput, Prisma.EmailRecipientUncheckedCreateWithoutEmailInput>
}

export type EmailRecipientUpdateWithWhereUniqueWithoutEmailInput = {
  where: Prisma.EmailRecipientWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailRecipientUpdateWithoutEmailInput, Prisma.EmailRecipientUncheckedUpdateWithoutEmailInput>
}

export type EmailRecipientUpdateManyWithWhereWithoutEmailInput = {
  where: Prisma.EmailRecipientScalarWhereInput
  data: Prisma.XOR<Prisma.EmailRecipientUpdateManyMutationInput, Prisma.EmailRecipientUncheckedUpdateManyWithoutEmailInput>
}

export type EmailRecipientScalarWhereInput = {
  AND?: Prisma.EmailRecipientScalarWhereInput | Prisma.EmailRecipientScalarWhereInput[]
  OR?: Prisma.EmailRecipientScalarWhereInput[]
  NOT?: Prisma.EmailRecipientScalarWhereInput | Prisma.EmailRecipientScalarWhereInput[]
  id?: Prisma.StringFilter<"EmailRecipient"> | string
  emailId?: Prisma.StringFilter<"EmailRecipient"> | string
  recipientEmail?: Prisma.StringFilter<"EmailRecipient"> | string
  recipientName?: Prisma.StringNullableFilter<"EmailRecipient"> | string | null
  status?: Prisma.EnumRecipientStatusFilter<"EmailRecipient"> | $Enums.RecipientStatus
  deliveredAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  openedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  clickedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  bouncedAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  complaintAt?: Prisma.DateTimeNullableFilter<"EmailRecipient"> | Date | string | null
  resendEmailId?: Prisma.StringNullableFilter<"EmailRecipient"> | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailRecipient"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmailRecipient"> | Date | string
}

export type EmailRecipientCreateWithoutEventsInput = {
  id?: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  email: Prisma.EmailCreateNestedOneWithoutRecipientsInput
}

export type EmailRecipientUncheckedCreateWithoutEventsInput = {
  id?: string
  emailId: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailRecipientCreateOrConnectWithoutEventsInput = {
  where: Prisma.EmailRecipientWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEventsInput, Prisma.EmailRecipientUncheckedCreateWithoutEventsInput>
}

export type EmailRecipientUpsertWithoutEventsInput = {
  update: Prisma.XOR<Prisma.EmailRecipientUpdateWithoutEventsInput, Prisma.EmailRecipientUncheckedUpdateWithoutEventsInput>
  create: Prisma.XOR<Prisma.EmailRecipientCreateWithoutEventsInput, Prisma.EmailRecipientUncheckedCreateWithoutEventsInput>
  where?: Prisma.EmailRecipientWhereInput
}

export type EmailRecipientUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.EmailRecipientWhereInput
  data: Prisma.XOR<Prisma.EmailRecipientUpdateWithoutEventsInput, Prisma.EmailRecipientUncheckedUpdateWithoutEventsInput>
}

export type EmailRecipientUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.EmailUpdateOneRequiredWithoutRecipientsNestedInput
}

export type EmailRecipientUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  emailId?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailRecipientCreateManyEmailInput = {
  id?: string
  recipientEmail: string
  recipientName?: string | null
  status?: $Enums.RecipientStatus
  deliveredAt?: Date | string | null
  openedAt?: Date | string | null
  clickedAt?: Date | string | null
  bouncedAt?: Date | string | null
  complaintAt?: Date | string | null
  resendEmailId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailRecipientUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EmailEventUpdateManyWithoutRecipientNestedInput
}

export type EmailRecipientUncheckedUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EmailEventUncheckedUpdateManyWithoutRecipientNestedInput
}

export type EmailRecipientUncheckedUpdateManyWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  recipientEmail?: Prisma.StringFieldUpdateOperationsInput | string
  recipientName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumRecipientStatusFieldUpdateOperationsInput | $Enums.RecipientStatus
  deliveredAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  clickedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  bouncedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  complaintAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  resendEmailId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type EmailRecipientCountOutputType
 */

export type EmailRecipientCountOutputType = {
  events: number
}

export type EmailRecipientCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  events?: boolean | EmailRecipientCountOutputTypeCountEventsArgs
}

/**
 * EmailRecipientCountOutputType without action
 */
export type EmailRecipientCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipientCountOutputType
   */
  select?: Prisma.EmailRecipientCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EmailRecipientCountOutputType without action
 */
export type EmailRecipientCountOutputTypeCountEventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailEventWhereInput
}


export type EmailRecipientSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  emailId?: boolean
  recipientEmail?: boolean
  recipientName?: boolean
  status?: boolean
  deliveredAt?: boolean
  openedAt?: boolean
  clickedAt?: boolean
  bouncedAt?: boolean
  complaintAt?: boolean
  resendEmailId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>
  events?: boolean | Prisma.EmailRecipient$eventsArgs<ExtArgs>
  _count?: boolean | Prisma.EmailRecipientCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailRecipient"]>

export type EmailRecipientSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  emailId?: boolean
  recipientEmail?: boolean
  recipientName?: boolean
  status?: boolean
  deliveredAt?: boolean
  openedAt?: boolean
  clickedAt?: boolean
  bouncedAt?: boolean
  complaintAt?: boolean
  resendEmailId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailRecipient"]>

export type EmailRecipientSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  emailId?: boolean
  recipientEmail?: boolean
  recipientName?: boolean
  status?: boolean
  deliveredAt?: boolean
  openedAt?: boolean
  clickedAt?: boolean
  bouncedAt?: boolean
  complaintAt?: boolean
  resendEmailId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailRecipient"]>

export type EmailRecipientSelectScalar = {
  id?: boolean
  emailId?: boolean
  recipientEmail?: boolean
  recipientName?: boolean
  status?: boolean
  deliveredAt?: boolean
  openedAt?: boolean
  clickedAt?: boolean
  bouncedAt?: boolean
  complaintAt?: boolean
  resendEmailId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmailRecipientOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "emailId" | "recipientEmail" | "recipientName" | "status" | "deliveredAt" | "openedAt" | "clickedAt" | "bouncedAt" | "complaintAt" | "resendEmailId" | "createdAt" | "updatedAt", ExtArgs["result"]["emailRecipient"]>
export type EmailRecipientInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>
  events?: boolean | Prisma.EmailRecipient$eventsArgs<ExtArgs>
  _count?: boolean | Prisma.EmailRecipientCountOutputTypeDefaultArgs<ExtArgs>
}
export type EmailRecipientIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>
}
export type EmailRecipientIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  email?: boolean | Prisma.EmailDefaultArgs<ExtArgs>
}

export type $EmailRecipientPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailRecipient"
  objects: {
    email: Prisma.$EmailPayload<ExtArgs>
    events: Prisma.$EmailEventPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    emailId: string
    recipientEmail: string
    recipientName: string | null
    status: $Enums.RecipientStatus
    deliveredAt: Date | null
    openedAt: Date | null
    clickedAt: Date | null
    bouncedAt: Date | null
    complaintAt: Date | null
    resendEmailId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["emailRecipient"]>
  composites: {}
}

export type EmailRecipientGetPayload<S extends boolean | null | undefined | EmailRecipientDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload, S>

export type EmailRecipientCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailRecipientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailRecipientCountAggregateInputType | true
  }

export interface EmailRecipientDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailRecipient'], meta: { name: 'EmailRecipient' } }
  /**
   * Find zero or one EmailRecipient that matches the filter.
   * @param {EmailRecipientFindUniqueArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailRecipientFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailRecipientFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailRecipient that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailRecipientFindUniqueOrThrowArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailRecipientFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailRecipientFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailRecipient that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientFindFirstArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailRecipientFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailRecipientFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailRecipient that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientFindFirstOrThrowArgs} args - Arguments to find a EmailRecipient
   * @example
   * // Get one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailRecipientFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailRecipientFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailRecipients that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailRecipients
   * const emailRecipients = await prisma.emailRecipient.findMany()
   * 
   * // Get first 10 EmailRecipients
   * const emailRecipients = await prisma.emailRecipient.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailRecipientWithIdOnly = await prisma.emailRecipient.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailRecipientFindManyArgs>(args?: Prisma.SelectSubset<T, EmailRecipientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailRecipient.
   * @param {EmailRecipientCreateArgs} args - Arguments to create a EmailRecipient.
   * @example
   * // Create one EmailRecipient
   * const EmailRecipient = await prisma.emailRecipient.create({
   *   data: {
   *     // ... data to create a EmailRecipient
   *   }
   * })
   * 
   */
  create<T extends EmailRecipientCreateArgs>(args: Prisma.SelectSubset<T, EmailRecipientCreateArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailRecipients.
   * @param {EmailRecipientCreateManyArgs} args - Arguments to create many EmailRecipients.
   * @example
   * // Create many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailRecipientCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailRecipientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailRecipients and returns the data saved in the database.
   * @param {EmailRecipientCreateManyAndReturnArgs} args - Arguments to create many EmailRecipients.
   * @example
   * // Create many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailRecipients and only return the `id`
   * const emailRecipientWithIdOnly = await prisma.emailRecipient.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailRecipientCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailRecipientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailRecipient.
   * @param {EmailRecipientDeleteArgs} args - Arguments to delete one EmailRecipient.
   * @example
   * // Delete one EmailRecipient
   * const EmailRecipient = await prisma.emailRecipient.delete({
   *   where: {
   *     // ... filter to delete one EmailRecipient
   *   }
   * })
   * 
   */
  delete<T extends EmailRecipientDeleteArgs>(args: Prisma.SelectSubset<T, EmailRecipientDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailRecipient.
   * @param {EmailRecipientUpdateArgs} args - Arguments to update one EmailRecipient.
   * @example
   * // Update one EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailRecipientUpdateArgs>(args: Prisma.SelectSubset<T, EmailRecipientUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailRecipients.
   * @param {EmailRecipientDeleteManyArgs} args - Arguments to filter EmailRecipients to delete.
   * @example
   * // Delete a few EmailRecipients
   * const { count } = await prisma.emailRecipient.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailRecipientDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailRecipientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailRecipients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailRecipientUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailRecipientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailRecipients and returns the data updated in the database.
   * @param {EmailRecipientUpdateManyAndReturnArgs} args - Arguments to update many EmailRecipients.
   * @example
   * // Update many EmailRecipients
   * const emailRecipient = await prisma.emailRecipient.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailRecipients and only return the `id`
   * const emailRecipientWithIdOnly = await prisma.emailRecipient.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailRecipientUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailRecipientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailRecipient.
   * @param {EmailRecipientUpsertArgs} args - Arguments to update or create a EmailRecipient.
   * @example
   * // Update or create a EmailRecipient
   * const emailRecipient = await prisma.emailRecipient.upsert({
   *   create: {
   *     // ... data to create a EmailRecipient
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailRecipient we want to update
   *   }
   * })
   */
  upsert<T extends EmailRecipientUpsertArgs>(args: Prisma.SelectSubset<T, EmailRecipientUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailRecipientClient<runtime.Types.Result.GetResult<Prisma.$EmailRecipientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailRecipients.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientCountArgs} args - Arguments to filter EmailRecipients to count.
   * @example
   * // Count the number of EmailRecipients
   * const count = await prisma.emailRecipient.count({
   *   where: {
   *     // ... the filter for the EmailRecipients we want to count
   *   }
   * })
  **/
  count<T extends EmailRecipientCountArgs>(
    args?: Prisma.Subset<T, EmailRecipientCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailRecipientCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailRecipient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailRecipientAggregateArgs>(args: Prisma.Subset<T, EmailRecipientAggregateArgs>): Prisma.PrismaPromise<GetEmailRecipientAggregateType<T>>

  /**
   * Group by EmailRecipient.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailRecipientGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailRecipientGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailRecipientGroupByArgs['orderBy'] }
      : { orderBy?: EmailRecipientGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailRecipientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailRecipientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailRecipient model
 */
readonly fields: EmailRecipientFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailRecipient.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailRecipientClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  email<T extends Prisma.EmailDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmailDefaultArgs<ExtArgs>>): Prisma.Prisma__EmailClient<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  events<T extends Prisma.EmailRecipient$eventsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmailRecipient$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailRecipient model
 */
export interface EmailRecipientFieldRefs {
  readonly id: Prisma.FieldRef<"EmailRecipient", 'String'>
  readonly emailId: Prisma.FieldRef<"EmailRecipient", 'String'>
  readonly recipientEmail: Prisma.FieldRef<"EmailRecipient", 'String'>
  readonly recipientName: Prisma.FieldRef<"EmailRecipient", 'String'>
  readonly status: Prisma.FieldRef<"EmailRecipient", 'RecipientStatus'>
  readonly deliveredAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
  readonly openedAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
  readonly clickedAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
  readonly bouncedAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
  readonly complaintAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
  readonly resendEmailId: Prisma.FieldRef<"EmailRecipient", 'String'>
  readonly createdAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EmailRecipient", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmailRecipient findUnique
 */
export type EmailRecipientFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where: Prisma.EmailRecipientWhereUniqueInput
}

/**
 * EmailRecipient findUniqueOrThrow
 */
export type EmailRecipientFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where: Prisma.EmailRecipientWhereUniqueInput
}

/**
 * EmailRecipient findFirst
 */
export type EmailRecipientFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?: Prisma.EmailRecipientOrderByWithRelationInput | Prisma.EmailRecipientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailRecipients.
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailRecipients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailRecipients.
   */
  distinct?: Prisma.EmailRecipientScalarFieldEnum | Prisma.EmailRecipientScalarFieldEnum[]
}

/**
 * EmailRecipient findFirstOrThrow
 */
export type EmailRecipientFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * Filter, which EmailRecipient to fetch.
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?: Prisma.EmailRecipientOrderByWithRelationInput | Prisma.EmailRecipientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailRecipients.
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailRecipients.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailRecipients.
   */
  distinct?: Prisma.EmailRecipientScalarFieldEnum | Prisma.EmailRecipientScalarFieldEnum[]
}

/**
 * EmailRecipient findMany
 */
export type EmailRecipientFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * Filter, which EmailRecipients to fetch.
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailRecipients to fetch.
   */
  orderBy?: Prisma.EmailRecipientOrderByWithRelationInput | Prisma.EmailRecipientOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailRecipients.
   */
  cursor?: Prisma.EmailRecipientWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailRecipients from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailRecipients.
   */
  skip?: number
  distinct?: Prisma.EmailRecipientScalarFieldEnum | Prisma.EmailRecipientScalarFieldEnum[]
}

/**
 * EmailRecipient create
 */
export type EmailRecipientCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * The data needed to create a EmailRecipient.
   */
  data: Prisma.XOR<Prisma.EmailRecipientCreateInput, Prisma.EmailRecipientUncheckedCreateInput>
}

/**
 * EmailRecipient createMany
 */
export type EmailRecipientCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailRecipients.
   */
  data: Prisma.EmailRecipientCreateManyInput | Prisma.EmailRecipientCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailRecipient createManyAndReturn
 */
export type EmailRecipientCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * The data used to create many EmailRecipients.
   */
  data: Prisma.EmailRecipientCreateManyInput | Prisma.EmailRecipientCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmailRecipient update
 */
export type EmailRecipientUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * The data needed to update a EmailRecipient.
   */
  data: Prisma.XOR<Prisma.EmailRecipientUpdateInput, Prisma.EmailRecipientUncheckedUpdateInput>
  /**
   * Choose, which EmailRecipient to update.
   */
  where: Prisma.EmailRecipientWhereUniqueInput
}

/**
 * EmailRecipient updateMany
 */
export type EmailRecipientUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailRecipients.
   */
  data: Prisma.XOR<Prisma.EmailRecipientUpdateManyMutationInput, Prisma.EmailRecipientUncheckedUpdateManyInput>
  /**
   * Filter which EmailRecipients to update
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * Limit how many EmailRecipients to update.
   */
  limit?: number
}

/**
 * EmailRecipient updateManyAndReturn
 */
export type EmailRecipientUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * The data used to update EmailRecipients.
   */
  data: Prisma.XOR<Prisma.EmailRecipientUpdateManyMutationInput, Prisma.EmailRecipientUncheckedUpdateManyInput>
  /**
   * Filter which EmailRecipients to update
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * Limit how many EmailRecipients to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmailRecipient upsert
 */
export type EmailRecipientUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * The filter to search for the EmailRecipient to update in case it exists.
   */
  where: Prisma.EmailRecipientWhereUniqueInput
  /**
   * In case the EmailRecipient found by the `where` argument doesn't exist, create a new EmailRecipient with this data.
   */
  create: Prisma.XOR<Prisma.EmailRecipientCreateInput, Prisma.EmailRecipientUncheckedCreateInput>
  /**
   * In case the EmailRecipient was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailRecipientUpdateInput, Prisma.EmailRecipientUncheckedUpdateInput>
}

/**
 * EmailRecipient delete
 */
export type EmailRecipientDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
  /**
   * Filter which EmailRecipient to delete.
   */
  where: Prisma.EmailRecipientWhereUniqueInput
}

/**
 * EmailRecipient deleteMany
 */
export type EmailRecipientDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailRecipients to delete
   */
  where?: Prisma.EmailRecipientWhereInput
  /**
   * Limit how many EmailRecipients to delete.
   */
  limit?: number
}

/**
 * EmailRecipient.events
 */
export type EmailRecipient$eventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailEvent
   */
  select?: Prisma.EmailEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailEvent
   */
  omit?: Prisma.EmailEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailEventInclude<ExtArgs> | null
  where?: Prisma.EmailEventWhereInput
  orderBy?: Prisma.EmailEventOrderByWithRelationInput | Prisma.EmailEventOrderByWithRelationInput[]
  cursor?: Prisma.EmailEventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmailEventScalarFieldEnum | Prisma.EmailEventScalarFieldEnum[]
}

/**
 * EmailRecipient without action
 */
export type EmailRecipientDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailRecipient
   */
  select?: Prisma.EmailRecipientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailRecipient
   */
  omit?: Prisma.EmailRecipientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailRecipientInclude<ExtArgs> | null
}
